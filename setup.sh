#!/bin/bash
# Enhanced setup script for AnomalyAgent with OpenAI configuration

echo "üöÄ AnomalyAgent Enhanced Setup"
echo "=============================="

# Parse command line arguments
OPENAI_API_KEY_ARG=""
OPENAI_API_BASE_ARG=""
OPENAI_MODEL_ARG=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --api-key)
            OPENAI_API_KEY_ARG="$2"
            shift 2
            ;;
        --api-base)
            OPENAI_API_BASE_ARG="$2"
            shift 2
            ;;
        --model)
            OPENAI_MODEL_ARG="$2"
            shift 2
            ;;
        --help)
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --api-key KEY     Set OpenAI API key"
            echo "  --api-base URL    Set OpenAI API base URL (default: https://api.openai.com/v1)"
            echo "  --model MODEL     Set model name (default: gpt-4o)"
            echo "  --help           Show this help message"
            echo ""
            echo "Examples:"
            echo "  $0 --api-key sk-..."
            echo "  $0 --api-key sk-... --model gpt-4"
            echo "  $0 --api-key sk-... --api-base https://custom-api.com/v1"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Check Python version
echo "üîç Checking Python version..."
if command -v python3 &> /dev/null; then
    python_version=$(python3 --version 2>&1 | grep -oP '(?<=Python )\d+\.\d+' || echo "unknown")
    echo "‚úÖ Python $python_version detected"
else
    echo "‚ùå Python 3 not found. Please install Python 3.11+"
    exit 1
fi

# Install dependencies
echo ""
echo "üì¶ Installing dependencies..."
if pip install -r requirements.txt; then
    echo "‚úÖ Dependencies installed successfully"
else
    echo "‚ùå Failed to install dependencies"
    exit 1
fi

# Configure OpenAI settings
echo ""
echo "üîß Configuring OpenAI Settings..."

# Set API key
if [ -n "$OPENAI_API_KEY_ARG" ]; then
    export OPENAI_API_KEY="$OPENAI_API_KEY_ARG"
    echo "‚úÖ OpenAI API key set from command line"
elif [ -n "$OPENAI_API_KEY" ]; then
    echo "‚úÖ OpenAI API key found in environment"
else
    echo "‚ö†Ô∏è  OpenAI API key not set"
    echo "   Set it with: export OPENAI_API_KEY='your-key-here'"
    echo "   Or use: $0 --api-key 'your-key-here'"
fi

# Create .env file for persistent configuration
if [ -n "$OPENAI_API_KEY_ARG" ] || [ -n "$OPENAI_API_BASE_ARG" ] || [ -n "$OPENAI_MODEL_ARG" ]; then
    echo "üìù Creating .env configuration file..."
    
    # Create or update .env file
    if [ -f .env ]; then
        cp .env .env.backup
        echo "   Backed up existing .env to .env.backup"
    fi
    
    cat > .env << EOF
# AnomalyAgent OpenAI Configuration
# Generated by setup.sh on $(date)

EOF
    
    if [ -n "$OPENAI_API_KEY_ARG" ]; then
        echo "OPENAI_API_KEY=$OPENAI_API_KEY_ARG" >> .env
        echo "   ‚úÖ API key saved to .env"
    fi
    
    if [ -n "$OPENAI_API_BASE_ARG" ]; then
        echo "OPENAI_API_BASE=$OPENAI_API_BASE_ARG" >> .env
        echo "   ‚úÖ API base URL saved to .env: $OPENAI_API_BASE_ARG"
    else
        echo "OPENAI_API_BASE=https://api.openai.com/v1" >> .env
        echo "   ‚úÖ Default API base URL saved to .env"
    fi
    
    if [ -n "$OPENAI_MODEL_ARG" ]; then
        echo "OPENAI_MODEL=$OPENAI_MODEL_ARG" >> .env
        echo "   ‚úÖ Model saved to .env: $OPENAI_MODEL_ARG"
    else
        echo "OPENAI_MODEL=gpt-4o" >> .env
        echo "   ‚úÖ Default model saved to .env: gpt-4o"
    fi
    
    cat >> .env << EOF

# Additional OpenAI settings optimized for low latency
OPENAI_TIMEOUT=20
OPENAI_MAX_RETRIES=2
OPENAI_TEMPERATURE=0.1
OPENAI_SSL_VERIFY=false
EOF
    
    echo "   üìÑ Configuration saved to .env file"
fi

# Create necessary directories
echo ""
echo "üìÅ Creating directories..."
mkdir -p workdir logs test_logs
mkdir -p workdir/behavioral_risk_detection
echo "‚úÖ Directories created"

# Set up supervisor configuration if API key is available
if [ -n "$OPENAI_API_KEY" ] || [ -n "$OPENAI_API_KEY_ARG" ]; then
    echo ""
    echo "‚öôÔ∏è  Updating supervisor configuration..."
    
    # Update supervisord.conf with the API key
    if [ -f supervisord.conf ]; then
        # Use the argument key if provided, otherwise use environment
        API_KEY_TO_USE="${OPENAI_API_KEY_ARG:-$OPENAI_API_KEY}"
        
        # Create backup
        cp supervisord.conf supervisord.conf.backup
        
        # Update the configuration
        sed -i.tmp "s|environment=OPENAI_API_KEY=\"YOUR_OPENAI_API_KEY_HERE\"|environment=OPENAI_API_KEY=\"$API_KEY_TO_USE\"|g" supervisord.conf
        rm supervisord.conf.tmp 2>/dev/null || true
        
        echo "‚úÖ Supervisor configuration updated"
    fi
fi

# Test configuration
echo ""
echo "üß™ Testing configuration..."
if python3 -c "
import os
from pathlib import Path
import sys
sys.path.insert(0, str(Path(__file__).resolve().parent))

try:
    from configs.config_main import openai_config
    print('‚úÖ Configuration imports successfully')
    
    api_key = os.getenv('OPENAI_API_KEY', openai_config.get('api_key', ''))
    if api_key and len(api_key) > 10:
        print('‚úÖ API key configured')
    else:
        print('‚ö†Ô∏è  API key needs to be set')
        
    print(f'   API Base: {openai_config[\"api_base_url\"]}')
    print(f'   Model: {openai_config[\"model_name\"]}')
    print(f'   SSL Verify: {openai_config[\"ssl_verify\"]}')
    print(f'   Timeout: {openai_config[\"timeout\"]}s (optimized for low latency)')
except Exception as e:
    print(f'‚ùå Configuration test failed: {e}')
    sys.exit(1)
" 2>/dev/null; then
    echo "‚úÖ Configuration test passed"
else
    echo "‚ö†Ô∏è  Configuration test had issues"
fi

echo ""
echo "üéâ Setup Complete!"
echo "=================="
echo ""
echo "üìä Configuration Summary:"
echo "   ‚Ä¢ API Base URL: ${OPENAI_API_BASE_ARG:-https://api.openai.com/v1}"
echo "   ‚Ä¢ Model: ${OPENAI_MODEL_ARG:-gpt-4o}"
echo "   ‚Ä¢ SSL Verification: Disabled (as requested)"
echo "   ‚Ä¢ Timeout: 20s (optimized for low latency)"
echo "   ‚Ä¢ Max Steps: 8-12 (optimized for speed)"
echo ""
echo "üöÄ Performance Features Enabled:"
echo "   ‚Ä¢ Confidence-based routing (4x faster on high confidence)"
echo "   ‚Ä¢ Parallel agent execution (4x faster analysis)"
echo "   ‚Ä¢ Agent trace reference for optimization"
echo "   ‚Ä¢ Low-latency configuration"
echo ""
echo "üéØ Next Steps:"
if [ -z "$OPENAI_API_KEY" ] && [ -z "$OPENAI_API_KEY_ARG" ]; then
    echo "   1. Set API key: export OPENAI_API_KEY='your-key-here'"
    echo "      OR re-run: $0 --api-key 'your-key-here'"
fi
echo "   2. Start server: python3 start.py"
echo "   3. Test API: curl http://localhost:8081/health"
echo "   4. View docs: http://localhost:8081/docs"
echo ""
echo "üìò For more configuration options, see SETUP_OPENAI.md"